// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PostStatus {
  APPROVED
  PENDING
  REJECTED
}

model User {
  id        String   @id @default(uuid())
  email     String  @unique
  password  String
  role      Role     @default(USER)
  isPremiumUser Boolean  @default(false)
  isBlocked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post      Post[]
  Comment   Comment[]
  Rating    Rating[]
  UserVote UserVote[]

  @@map("users")
}

model Post {
  id        String   @id @default(uuid())
  authorId  String
  title     String
  content   String
  location  String
  price     Float
  image     String
  ratingAvg  Int     @default(5)
  upvotes    Int      @default(0)
  downvotes  Int      @default(0)
  isPremiumPost Boolean  @default(false)
  status    PostStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Catagory Catagory[]
  Comment Comment[]
  Rating Rating[]
  UserVote UserVote[]

  author    User     @relation(fields: [authorId], references: [id])

  @@map("posts")
}

model Rating {
  id        String   @id @default(uuid())
  postId    String
  userId    String   @unique
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("ratings")
}

model UserVote {
  id        String   @id @default(uuid())
  postId    String   
  userId    String   
  upVote    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_votes")
  @@unique([postId, userId], name: "unique_post_user_vote")
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Catagory {
  id        String   @id @default(uuid())
  name      String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post Post[]

  @@map("categories")
}
